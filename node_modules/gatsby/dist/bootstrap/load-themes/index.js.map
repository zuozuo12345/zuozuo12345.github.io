{"version":3,"file":"index.js","names":["debug","DebugCtor","resolveTheme","themeSpec","configFileThatDeclaredTheme","isMainConfig","rootDir","themeName","resolve","themeDir","scopedRequire","createRequireFromPath","path","dirname","e","pathToLocalTheme","join","resolvePlugin","localErr","reporter","panic","nodeResolutionPaths","module","paths","map","p","id","context","configFilePath","configModule","getConfigFile","theme","preferDefault","themeConfig","options","parentDir","processTheme","themesList","plugins","mapSeries","spec","themeObj","then","arr","concat","Promise","normalizePluginEntry","plugin","loadThemes","config","themesA","reduce","mergeGatsbyConfig","newConfig","mergedConfig","themes"],"sources":["../../../src/bootstrap/load-themes/index.ts"],"sourcesContent":["import { createRequireFromPath } from \"gatsby-core-utils\"\nimport * as path from \"path\"\nimport {\n  IGatsbyConfigInput,\n  mergeGatsbyConfig,\n  PluginEntry,\n  IPluginEntryWithParentDir,\n} from \"../../utils/merge-gatsby-config\"\nimport { mapSeries } from \"bluebird\"\nimport { flattenDeep, isEqual, isFunction, uniqWith } from \"lodash\"\nimport DebugCtor from \"debug\"\nimport { preferDefault } from \"../prefer-default\"\nimport { getConfigFile } from \"../get-config-file\"\nimport { resolvePlugin } from \"../load-plugins/resolve-plugin\"\nimport reporter from \"gatsby-cli/lib/reporter\"\n\nconst debug = DebugCtor(`gatsby:load-themes`)\n\ninterface IThemeObj {\n  themeName: string\n  themeConfig: IGatsbyConfigInput\n  themeDir: string\n  themeSpec: PluginEntry\n  parentDir: string\n  configFilePath?: string\n}\n\n// get the gatsby-config file for a theme\nconst resolveTheme = async (\n  themeSpec: PluginEntry,\n  configFileThatDeclaredTheme: string | undefined,\n  isMainConfig: boolean = false,\n  rootDir: string\n): Promise<IThemeObj> => {\n  const themeName =\n    typeof themeSpec === `string` ? themeSpec : themeSpec.resolve\n  let themeDir\n  try {\n    const scopedRequire = createRequireFromPath(`${rootDir}/:internal:`)\n    // theme is an node-resolvable module\n    themeDir = path.dirname(scopedRequire.resolve(themeName))\n  } catch (e) {\n    let pathToLocalTheme\n\n    // only try to look for local theme in main site\n    // local themes nested in other themes is potential source of problems:\n    // because those are not hosted by npm, there is potential for multiple\n    // local themes with same name that do different things and name being\n    // main identifier that Gatsby uses right now, it's safer not to support it for now.\n    if (isMainConfig) {\n      pathToLocalTheme = path.join(rootDir, `plugins`, themeName)\n      // is a local plugin OR it doesn't exist\n      try {\n        const { resolve } = resolvePlugin(themeName, rootDir)\n        themeDir = resolve\n      } catch (localErr) {\n        reporter.panic(`Failed to resolve ${themeName}`, localErr)\n      }\n    }\n\n    if (!themeDir) {\n      const nodeResolutionPaths = module.paths.map(p => path.join(p, themeName))\n      reporter.panic({\n        id: `10226`,\n        context: {\n          themeName,\n          configFilePath: configFileThatDeclaredTheme,\n          pathToLocalTheme,\n          nodeResolutionPaths,\n        },\n      })\n    }\n  }\n\n  const { configModule, configFilePath } = await getConfigFile(\n    themeDir,\n    `gatsby-config`\n  )\n  const theme:\n    | IGatsbyConfigInput\n    | ((options?: Record<string, unknown>) => IGatsbyConfigInput) =\n    preferDefault(configModule)\n\n  // if theme is a function, call it with the themeConfig\n  const themeConfig = isFunction(theme)\n    ? theme(typeof themeSpec === `string` ? {} : themeSpec.options)\n    : theme\n\n  return {\n    themeName,\n    themeConfig,\n    themeSpec,\n    themeDir,\n    parentDir: rootDir,\n    configFilePath,\n  }\n}\n\n// single iteration of a recursive function that resolve parent themes\n// It's recursive because we support child themes declaring parents and\n// have to resolve all the way `up the tree` of parent/children relationships\n//\n// Theoretically, there could be an infinite loop here but in practice there is\n// no use case for a loop so I expect that to only happen if someone is very\n// off track and creating their own set of themes\nconst processTheme = (\n  { themeName, themeConfig, themeSpec, themeDir, configFilePath }: IThemeObj,\n  { rootDir }: { rootDir: string }\n): Promise<Array<IThemeObj>> => {\n  const themesList = themeConfig && themeConfig.plugins\n  // Gatsby themes don't have to specify a gatsby-config.js (they might only use gatsby-node, etc)\n  // in this case they're technically plugins, but we should support it anyway\n  // because we can't guarantee which files theme creators create first\n  if (themeConfig && themesList) {\n    // for every parent theme a theme defines, resolve the parent's\n    // gatsby config and return it in order [parentA, parentB, child]\n    return mapSeries(\n      themesList,\n      async (spec: PluginEntry): Promise<Array<IThemeObj>> => {\n        const themeObj = await resolveTheme(\n          spec,\n          configFilePath,\n          false,\n          themeDir\n        )\n        return processTheme(themeObj, { rootDir: themeDir })\n      }\n    ).then(arr =>\n      flattenDeep(\n        arr.concat([\n          { themeName, themeConfig, themeSpec, themeDir, parentDir: rootDir },\n        ])\n      )\n    )\n  } else {\n    // if a theme doesn't define additional themes, return the original theme\n    return Promise.resolve([\n      { themeName, themeConfig, themeSpec, themeDir, parentDir: rootDir },\n    ])\n  }\n}\n\nfunction normalizePluginEntry(\n  plugin: PluginEntry,\n  parentDir: string\n): IPluginEntryWithParentDir {\n  return {\n    resolve: typeof plugin === `string` ? plugin : plugin.resolve,\n    options: typeof plugin === `string` ? {} : plugin.options || {},\n    parentDir,\n  }\n}\n\nexport async function loadThemes(\n  config: IGatsbyConfigInput,\n  { configFilePath, rootDir }: { configFilePath: string; rootDir: string }\n): Promise<{\n  config: IGatsbyConfigInput\n  themes: Array<IThemeObj>\n}> {\n  const themesA = await mapSeries(\n    config.plugins || [],\n    async (themeSpec: PluginEntry) => {\n      const themeObj = await resolveTheme(\n        themeSpec,\n        configFilePath,\n        true,\n        rootDir\n      )\n      return processTheme(themeObj, { rootDir })\n    }\n  ).then(arr => flattenDeep(arr))\n\n  // log out flattened themes list to aid in debugging\n  debug(themesA)\n\n  // map over each theme, adding the theme itself to the plugins\n  // list in the config for the theme. This enables the usage of\n  // gatsby-node, etc in themes.\n  return (\n    mapSeries(\n      themesA,\n      ({ themeName, themeConfig = {}, themeSpec, themeDir, parentDir }) => {\n        return {\n          ...themeConfig,\n          plugins: [\n            ...(themeConfig.plugins || []).map(plugin =>\n              normalizePluginEntry(plugin, themeDir)\n            ),\n            // theme plugin is last so it's gatsby-node, etc can override it's declared plugins, like a normal site.\n            {\n              resolve: themeName,\n              options: typeof themeSpec === `string` ? {} : themeSpec.options,\n              parentDir,\n            },\n          ],\n        }\n      }\n    )\n      /**\n       * themes resolve to a gatsby-config, so here we merge all of the configs\n       * into a single config, making sure to maintain the order in which\n       * they were defined so that later configs, like the user's site and\n       * children, can override functionality in earlier themes.\n       */\n      .reduce(mergeGatsbyConfig, {})\n      .then(newConfig => {\n        const mergedConfig = mergeGatsbyConfig(newConfig, {\n          ...config,\n          plugins: [\n            ...(config.plugins || []).map(plugin =>\n              normalizePluginEntry(plugin, rootDir)\n            ),\n          ],\n        })\n\n        mergedConfig.plugins = uniqWith(mergedConfig.plugins, isEqual)\n\n        return {\n          config: mergedConfig,\n          themes: themesA,\n        }\n      })\n  )\n}\n"],"mappings":"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"}